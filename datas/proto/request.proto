/*
@Author: liubai
@Date: 2020/5/18 10:31 下午
@Desc: 定义请求结构
*/
syntax = "proto3";

package heartbeat;
option go_package = ".;heartbeat";

message RequestHeader {
    int64 user_id = 1;
    string server_type = 2; //服务类型
    string cmd_type = 3;
    string version = 4;
}

//此结构为消息中间件中的数据传输格式，其中cmdType供服务中自行区分解析
//加上发送方的sender_id, 接受的userId, 最后接受的userId
//
message MsgBody {
    int32 msg_type = 1;
    string sender_id = 2;
    string cmd_type = 3;
    int64 user_id = 4;
    bytes msg_bytes = 5;
    string version = 6;
}

message TokenTcpRequest {
    int64 user_id = 1;
    string user_name = 2;
    string password = 3;
    string version = 4;
}

message TokenTcpRespone {
    int64 user_id = 1;
    string token = 2;
    int32 result = 3;
    string version = 4;
}

message LoginRequest {
    int64 user_id = 1;
    string user_name = 2;
    string password = 3;
    string token = 4;
    uint32 login_type = 5;
    string version = 6;
}

message LoginRespone {
    int64 user_id = 1;
    uint32 code = 2;
    uint32 login_state = 3;
    string oms = 4;
    string version = 5;
}

message HeartBeatReq {
    int64 user_id = 1;
    string version = 2;
}

message HeartBeatRsp {
    int64 user_id = 1;
    int64 code = 2;
    int64 timestamp = 3;
    string version = 4;
}

message CommunicateReq {
    int64 user_id = 1;
    string version = 2;
    string message = 3;
}

message CommunicateRsp {
    int64 user_id = 1;
    int64 code = 2;
    string version = 3;
}